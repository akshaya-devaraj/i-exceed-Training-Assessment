collections:
Collections are efficient because they:

Organize data in a way that allows fast access and search (like accessing list elements by index in constant time).

Use optimized internal structures (arrays, hash tables) for quick insertions, deletions, and lookups.

Provide built-in methods that are highly optimized, saving you from writing slow manual code.

Manage memory smartly by resizing only when necessary, making operations like adding elements fast overall.

Benefit from type information in Dart, enabling better runtime performance.

| Feature               | List                                                  | Array                                                                                |
| --------------------- | ----------------------------------------------------- | ------------------------------------------------------------------------------------ |
| **Size**              | Dynamic (can grow or shrink)                          | Fixed size (length set at creation)                                                  |
| **Flexibility**       | Can add/remove elements anytime                       | Size cannot be changed after creation                                                |
| **Built-in Methods**  | Rich set of methods (`add`, `remove`, `insert`, etc.) | Limited or no built-in methods                                                       |
| **Type**              | Can be generic/typed or dynamic                       | Usually fixed type                                                                   |
| **Memory Management** | Automatically manages resizing internally             | Requires manual resizing or new allocation                                           |
| **Usage in Dart**     | Primary collection type                               | Dart does not have a separate array type; Lists are used                             |
| **Performance**       | Slight overhead due to resizing                       | Potentially faster fixed size storage                                                |
| **Syntax**            | `List<T> myList = [];`                                | Arrays have different syntax depending on language (e.g., `int[] arr = new int[5];`) |
| **Language Support**  | Built-in in Dart, Python, Java (ArrayList), etc.      | Built-in in C, Java, JavaScript, etc.                                                |


Data types in list:

1. Typed Lists (Recommended)
If you declare a list with a specific type, e.g., List<int>, then all elements must be of that type (or a subtype).

List<int> numbers = [1, 2, 3];   // All elements must be int
// numbers.add('hello');          // Error: String is not an int
This helps with type safety and prevents bugs.

2. Untyped or Dynamic Lists
If you declare a list without specifying a type (or use List<dynamic>), then the list can hold mixed data types:

var mixedList = [1, 'hello', true];
print(mixedList);  // Output: [1, hello, true]
This gives flexibility but sacrifices type safety, so use carefully.


A List is an ordered collection of items where each item can be accessed by its index, starting at zero. It’s similar to arrays in other languages but with more flexibility and features.

Lists can store any data type (numbers, strings, objects).

They maintain the order of elements.

You can have duplicate elements.

2. Types of Lists in Dart
a) Fixed-length List
Length is set at creation and cannot grow or shrink.

Elements can be changed after creation.

Created using List.filled() or List.generate().

void main() {
  // Create a fixed-length list of length 3, filled with zeros
  List<int> fixedList = List.filled(3, 0);
  print(fixedList); // Output: [0, 0, 0]

  // Update elements
  fixedList[1] = 10;
  print(fixedList); // Output: [0, 10, 0]

  // fixedList.add(5); // This will cause an error because fixed length lists can't grow
}

b) Growable List
The default kind of list in Dart.

Can change length dynamically by adding or removing elements.

Created with list literals [] or by calling List() with no length parameter.

void main() {
  List<String> growableList = ['apple', 'banana'];
  growableList.add('orange');       // Adds at the end
  growableList.insert(1, 'grape');  // Inserts at index 1

  print(growableList); // Output: [apple, grape, banana, orange]

  growableList.remove('banana');    // Removes by value
  print(growableList); // Output: [apple, grape, orange]
}

3. Declaring Lists
You can declare lists explicitly or implicitly:

dart
Copy
Edit
// Explicitly typed list
List<int> numbers = [1, 2, 3];

// Implicitly typed list (type inferred)
var fruits = ['apple', 'banana'];

// Empty list with type specified
List<double> decimals = [];

// Empty growable list
var emptyList = <String>[];

4. Accessing List Elements
Use index inside square brackets.

Index starts from 0.

Access last element with list[list.length - 1] or from Dart 2.3+, list.last.

dart
Copy
Edit
var numbers = [10, 20, 30];
print(numbers[0]);  // Output: 10
print(numbers[2]);  // Output: 30
print(numbers.last); // Output: 30

5. Modifying Lists
Add Elements
.add(element) — add single element to end.

.addAll(iterable) — add multiple elements.

.insert(index, element) — insert at specific index.

dart
Copy
Edit
var list = [1, 2, 3];
list.add(4);             // [1, 2, 3, 4]
list.addAll([5, 6]);     // [1, 2, 3, 4, 5, 6]
list.insert(1, 10);      // [1, 10, 2, 3, 4, 5, 6]

Add Elements
.add(element) — add single element to end.

.addAll(iterable) — add multiple elements.

.insert(index, element) — insert at specific index.


var list = [1, 2, 3];
list.add(4);             // [1, 2, 3, 4]
list.addAll([5, 6]);     // [1, 2, 3, 4, 5, 6]
list.insert(1, 10);      // [1, 10, 2, 3, 4, 5, 6]

Remove Elements
.remove(value) — remove first occurrence of value.

.removeAt(index) — remove element at index.

.removeLast() — removes last element.

.clear() — empties the list.

var list = [1, 2, 3, 4];
list.remove(2);       // [1, 3, 4]
list.removeAt(0);     // [3, 4]
list.removeLast();    // [3]
list.clear();         // []

Iterating Through a List
Several ways to iterate over list elements:


var fruits = ['apple', 'banana', 'cherry'];

// Using for loop with index
for (int i = 0; i < fruits.length; i++) {
  print(fruits[i]);
}

// Using for-in loop
for (var fruit in fruits) {
  print(fruit);
}

// Using forEach() method
fruits.forEach((fruit) => print(fruit));

8. Advanced Dart List Features
a) Spread Operator (...)
Combine lists or insert elements from one list into another:

var list1 = [1, 2];
var list2 = [0, ...list1, 3];  // [0, 1, 2, 3]
b) Null-aware Spread Operator (...?)
Safely spread a list that might be null:

List<int>? nullableList;
var combined = [0, ...?nullableList];  // [0]
c) Collection If
Add elements conditionally:

bool isLoggedIn = true;
var menu = ['Home', if (isLoggedIn) 'Logout', 'Contact'];
print(menu);  // ['Home', 'Logout', 'Contact']
d) Collection For
Add elements using a loop inside a list:


var numbers = [1, 2, 3];
var doubled = [for (var n in numbers) n * 2];
print(doubled);  // [2, 4, 6]


7. Useful List Properties & Methods
Property/Method	Description	Example
length	Number of elements	list.length
isEmpty	Checks if list is empty	list.isEmpty
isNotEmpty	Checks if list is not empty	list.isNotEmpty
contains(value)	Checks if value is present	list.contains(5)
indexOf(value)	Returns index of first occurrence	list.indexOf('apple')
lastIndexOf(value)	Returns last occurrence index	list.lastIndexOf('apple')
reversed	Returns reversed iterable	list.reversed.toList()
sort()	Sorts list in place	list.sort()
sublist(start, end)	Extracts part of the list	list.sublist(1, 3)

LinkedList 

A LinkedList is a data structure consisting of nodes where each node contains:

Data (the element)

Pointers (links) to the next and/or previous node

In Dart, the linked list provided is a doubly linked list, meaning each node links to both the next and previous nodes.

Key Characteristics of Dart’s LinkedList
Available in the dart:collection library.

Each element in the linked list must extend LinkedListEntry.

The list itself is of type LinkedList<E extends LinkedListEntry<E>>.

Supports efficient insertions and removals at any position (constant time O(1)).

Does not support random access by index — you must iterate through the list.

Useful when you need frequent insertions and deletions and don't require fast indexed access.

Feature	LinkedList	List
Insertion/removal	Fast O(1) anywhere in list	Slow O(n) in the middle (due to shifting)
Indexed access	Not supported (no random access)	Fast O(1) by index
Memory usage	More (due to pointers)	Less (array-backed)
Use cases	Implementing queues, caches, or complex structures where frequent insertion/deletion happens	General-purpose collection



How to Use LinkedList in Dart
Step 1: Import the library
dart
Copy
Edit
import 'dart:collection';
Step 2: Define your entry class extending LinkedListEntry
Each item you want in the linked list must extend LinkedListEntry<T>, where T is your class itself.

dart
Copy
Edit
class MyEntry extends LinkedListEntry<MyEntry> {
  final int value;
  MyEntry(this.value);

  @override
  String toString() => 'Entry($value)';
}
Step 3: Create a LinkedList and add entries
dart
Copy
Edit
void main() {
  LinkedList<MyEntry> list = LinkedList<MyEntry>();

  // Add elements
  list.add(MyEntry(10));
  list.add(MyEntry(20));
  list.add(MyEntry(30));

  // Iterate over list
  for (var entry in list) {
    print(entry.value);
  }
}
Output:

Copy
Edit
10
20
30
LinkedList Operations
Insertion
add(entry) — adds to the end.

addBefore(entry) — add before a given entry.

addAfter(entry) — add after a given entry.

insertBefore(entry) — insert before current entry.

insertAfter(entry) — insert after current entry.

Removal
entry.unlink() — removes the entry from the list.

Accessing neighbors
entry.next — next entry (or null if last).

entry.previous — previous entry (or null if first).

Example: Inserting and Removing in LinkedList
dart
Copy
Edit
void main() {
  var list = LinkedList<MyEntry>();
  var e1 = MyEntry(1);
  var e2 = MyEntry(2);
  var e3 = MyEntry(3);

  list.add(e1);
  list.add(e3);

  // Insert e2 before e3
  e3.insertBefore(e2);

  // Print all values
  for (var e in list) {
    print(e.value); // Output: 1, 2, 3
  }

  // Remove e2
  e2.unlink();

  print('After removal:');
  for (var e in list) {
    print(e.value); // Output: 1, 3
  }
}
Summary
Aspect	Details
Type	Doubly linked list
Element requirements	Must extend LinkedListEntry
Performance	Fast insertion/removal (O(1))
Random access	Not supported